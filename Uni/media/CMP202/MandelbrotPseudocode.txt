MandelbrotPseudocode

Define typedef alias "theClock" for clock type that's going to be used

Define size of image we're going to generate (4:3 aspect ratio is standard)
Define width = 1280
Define height = 960

Define MAX_IT the number of times to iterate before we determine a point isn't in the set as 500

Define image data, pixel value represented as 0xRRGGBB

Define int firstColour
Define int secondColour

Function to write image to TGA file (https:(www.gamers.org/dEngine/quake3/TGA.txt)
func write_tga
    Define filename = mandelbrot-[datetime].tga

    output filestream object "outfile" w/ filename and ofstream::binary as arguments

    Define file header array uint8_t with 18 items
        0, //no image ID
		0, //no colour map
		2, //uncompressed 24-bit image
		0, 0, 0, 0, 0, //empty colour map specification
		0, 0, //X origin
		0, 0, //Y origin
		WIDTH & 0xFF, (WIDTH >> 8) & 0xFF, //width
		HEIGHT & 0xFF, (HEIGHT >> 8) & 0xFF, //height
		24, //bits per pixel
		0, //image descriptor

    write outfile with header (represented as char*), and 18 as arguments

    for y = 0, y < height, ++y
        for x = 0, x < width, ++x
            Define pixel array uint8_t with 3 items
                image[y][x] & 0xFF, //blue channel
				(image[y][x] >> 8) & 0xFF, //green channel
				(image[y][x] >> 16) & 0xFF, //red channel
            write outfile with header (represented as char*), and 3 as arguments

    close outfile
    if !outfile
        error message
        exit

Function to actually compute the mandelbrot set, the arguments specify where to plot the set on the plane
func compute(left, right, top, bottom, start, end)
    for y = start, y < end, ++y 
        for x = 0, x < width, ++x 

            work out the point in the plane that corresponds to this pixel in the image
            create a complex number with double data type called c and give it the value (left + (x * (right - left) / width), top + (y * (bottom - top) / height)) 

            start off z at 0, 0
            create a complex number with double data type called z and give it the value (0.0, 0.0)
			
			Iterate z = z^2 + c until z moves more than 2 units away from (0, 0) or we've iterated too much
			Define int it
			while abs(z) < 2.0 && it < MAX_IT
				z = (z * z) + c
				++it

			if it == MAX_IT
			  	image[y][x] = firstColour
			else
			  	image[y][x] = secondColour

Main Function
func main
	print "CMP 202 Mandelbrot Set Generator - 2021 Isaac Basque-Rice"

	Define string firstColourName
	Define string secondColourName

	print "Please choose your first colour (1-9): "
	print "1: White \n 2: Black \n 3: Red \n 4: Orange \n 5: Yellow \n 6: Green \n 7: Blue \n 8: Indigo \n 9: Violet"

	input firstColour

	switch firstColour
		case 1: firstColour = 0xFFFFFF
				firstColourName = "White"
			break
		case 2: firstColour = 0x000000
				firstColourName = "Black"
			break
		case 3: firstColour = 0xFF0000 
				firstColourName = "Red"
			break
		case 4: firstColour = 0xFFA500 
				firstColourName = "Orange"
			break
		case 5: firstColour = 0xFFFF00
				firstColourName = "Yellow"
			break
		case 6: firstColour = 0x00FF00
				firstColourName = "Green"
			break
		case 7: firstColour = 0x0000FF
				firstColourName = "Blue"
			break
		case 8: firstColour = 0x4B0082
				firstColourName = "Indigo"
			break
		case 9: firstColour = 0x8F00FF
				firstColourName = "Violet"
			break


	print "Please choose your second colour (1-9): "
	print "1: White \n 2: Black \n 3: Red \n 4: Orange \n 5: Yellow \n 6: Green \n 7: Blue \n 8: Indigo \n 9: Violet

	input secondColour

	switch firstColour
		case 1: secondColour = 0xFFFFFF
				secondColourName = "White"
			break
		case 2: secondColour = 0x000000
				secondColourName = "Black"
			break
		case 3: secondColour = 0xFF0000 
				secondColourName = "Red"
			break
		case 4: secondColour = 0xFFA500 
				secondColourName = "Orange"
			break
		case 5: secondColour = 0xFFFF00
				secondColourName = "Yellow"
			break
		case 6: secondColour = 0x00FF00
				secondColourName = "Green"
			break
		case 7: secondColour = 0x0000FF
				secondColourName = "Blue"
			break
		case 8: secondColour = 0x4B0082
				secondColourName = "Indigo"
			break
		case 9: secondColour = 0x8F00FF
				secondColourName = "Violet"
			break

	print "Generating a " + firstColourName + " and " + secondColorName + " Mandelbrot Set..."

	int left = -2
	int right = 1
	int top = 1.125
	int bottom = -1.125

	start clock

	start thread a(Calc, left, right, top, bottom, 0, 160)
	start thread b(Calc, left, right, top, bottom, 161, 320)
	start thread c(Calc, left, right, top, bottom, 321, 480)
	start thread d(Calc, left, right, top, bottom, 481, 640)
	start thread e(Calc, left, right, top, bottom, 641, 800)
	start thread f(Calc, left, right, top, bottom, 801, 960)
	start thread g(Calc, left, right, top, bottom, 961, 1120)
	start thread h(Calc, left, right, top, bottom, 1121, 1280)
	join a
	join b
	join c
	join d
	join e
	join f
	join g
	join h

	stop clock

	auto timeTaken = start clock - stop clock
	print "Time taken to generate: " + timeTaken